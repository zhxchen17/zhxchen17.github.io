{"version":3,"file":"component---src-templates-blog-post-archive-js-3d0f133a86a2a80cc96c.js","mappings":"2KAqDA,IA3CY,WAAO,IAAD,EACRA,GAAWC,EAAAA,EAAAA,gBAAe,aAA1BD,OAcFE,EAAYF,MAAAA,GAAH,UAAGA,EAAQG,cAAX,aAAG,EAAgBC,IAElC,OACE,uBAAKC,UAAU,OACZH,GACC,uBACEI,KAAKN,MAAAA,OAAA,EAAAA,EAAQO,YAAR,GACLF,UAAU,aACVG,IAAKN,KAGRF,MAAAA,OAAA,EAAAA,EAAQO,YACP,uCACa,8BAASP,EAAOO,WAD7B,KAGGP,MAAAA,OAAA,EAAAA,EAAQS,cAAe,KAH1B,KAKGT,MAAAA,OAAA,EAAAA,EAAQU,UACP,qBAAGC,KAAI,yBAAyBX,MAAAA,OAAA,EAAAA,EAAQU,UAAR,KAAhC,yC,4FC2BZ,UA9DkB,SAAC,GAGZ,IAFLE,EAEI,EAFJA,KAEI,IADJC,YAAeC,EACX,EADWA,aAAcC,EACzB,EADyBA,iBAEvBC,EAAQJ,EAAKK,UAAUC,MAE7B,OAAKF,EAAMG,OAcT,gBAAC,IAAD,CAAQC,YAAU,GAChB,gBAAC,IAAD,CAAKC,MAAM,cAEX,gBAAC,IAAD,MAEA,sBAAIC,MAAO,CAAEC,UAAU,SACpBP,EAAMQ,KAAI,SAAAC,GACT,IAAMJ,EAAQI,EAAKJ,MAEnB,OACE,sBAAIK,IAAKD,EAAKE,KACZ,2BACEtB,UAAU,iBACVuB,WAAS,EACTC,SAAS,6BAET,8BACE,0BACE,gBAAC,EAAAC,KAAD,CAAMC,GAAIN,EAAKE,IAAKK,SAAS,OAC3B,wBAAMA,SAAS,aAAYC,EAAAA,EAAAA,IAAMZ,MAGrC,6BAAQI,EAAKS,OAEf,2BAASF,SAAS,gBAAeC,EAAAA,EAAAA,IAAMR,EAAKU,gBAOrDpB,GACC,gCACE,gBAAC,EAAAe,KAAD,CAAMC,GAAIhB,GAAV,iBACA,4BAGHD,GAAgB,gBAAC,EAAAgB,KAAD,CAAMC,GAAIjB,GAAV,cAjDjB,gBAAC,IAAD,CAAQM,YAAU,GAChB,gBAAC,IAAD,CAAKC,MAAM,cACX,gBAAC,IAAD,MACA","sources":["webpack://gatsby-starter-wordpress-blog/./src/components/bio.js","webpack://gatsby-starter-wordpress-blog/./src/templates/blog-post-archive.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Bio = () => {\n  const { author } = useStaticQuery(graphql`\n    query BioQuery {\n      # if there was more than one user, this would need to be filtered\n      author: wpUser {\n        firstName\n        twitter: name\n        description\n        avatar {\n          url\n        }\n      }\n    }\n  `)\n\n  const avatarUrl = author?.avatar?.url\n\n  return (\n    <div className=\"bio\">\n      {avatarUrl && (\n        <img\n          alt={author?.firstName || ``}\n          className=\"bio-avatar\"\n          src={avatarUrl}\n        />\n      )}\n      {author?.firstName && (\n        <p>\n          Written by <strong>{author.firstName}</strong>\n          {` `}\n          {author?.description || null}\n          {` `}\n          {author?.twitter && (\n            <a href={`https://twitter.com/${author?.twitter || ``}`}>\n              You should follow them on Twitter\n            </a>\n          )}\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport parse from \"html-react-parser\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogIndex = ({\n  data,\n  pageContext: { nextPagePath, previousPagePath },\n}) => {\n  const posts = data.allWpPost.nodes\n\n  if (!posts.length) {\n    return (\n      <Layout isHomePage>\n        <Seo title=\"All posts\" />\n        <Bio />\n        <p>\n          No blog posts found. Add posts to your WordPress site and they'll\n          appear here!\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout isHomePage>\n      <Seo title=\"All posts\" />\n\n      <Bio />\n\n      <ol style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = post.title\n\n          return (\n            <li key={post.uri}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.uri} itemProp=\"url\">\n                      <span itemProp=\"headline\">{parse(title)}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.date}</small>\n                </header>\n                <section itemProp=\"description\">{parse(post.excerpt)}</section>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n\n      {previousPagePath && (\n        <>\n          <Link to={previousPagePath}>Previous page</Link>\n          <br />\n        </>\n      )}\n      {nextPagePath && <Link to={nextPagePath}>Next page</Link>}\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query WordPressPostArchive($offset: Int!, $postsPerPage: Int!) {\n    allWpPost(\n      sort: { fields: [date], order: DESC }\n      limit: $postsPerPage\n      skip: $offset\n    ) {\n      nodes {\n        excerpt\n        uri\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        excerpt\n      }\n    }\n  }\n`\n"],"names":["author","useStaticQuery","avatarUrl","avatar","url","className","alt","firstName","src","description","twitter","href","data","pageContext","nextPagePath","previousPagePath","posts","allWpPost","nodes","length","isHomePage","title","style","listStyle","map","post","key","uri","itemScope","itemType","Link","to","itemProp","parse","date","excerpt"],"sourceRoot":""}